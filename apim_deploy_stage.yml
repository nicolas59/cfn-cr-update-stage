AWSTemplateFormatVersion: "2010-09-09"
Description: Stack CustomRessource DeployStage
Resources:
  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "iam-role-lambda-update-api-stage"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allow-logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: arn:aws:logs:*:*:*
        - PolicyName: allow-update-stage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "apigateway:POST"
                Resource: "*"
  DeployStageLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "lambda-apigateway-update-stage"
      Runtime: nodejs12.x
      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const response = require("cfn-response");
          const apigateway = new AWS.APIGateway();
          function verifyRequired(fieldName, value) {
            if (typeof value === "string" && value.trim().length > 0) {
              return value;
            }
            throw new Error(`the field ${fieldName} is required`);
          }
          exports.handler = function(event, context) {
            console.log("RequestType : ", event.RequestType);
            if (event.RequestType == "Delete") {
              //Nothing to do
              response.send(event, context, response.SUCCESS);
              return;
            }
            try {
              const restApiId = verifyRequired("RestApiId", event.ResourceProperties.RestApiId);
              const stageName = verifyRequired("StageName", event.ResourceProperties.StageName);
              const description = verifyRequired("Description", event.ResourceProperties.Description);

              const params = {
                restApiId: restApiId,
                stageName: stageName,
                stageDescription: description,
                description: description,
              };

              const variables = event.ResourceProperties.Variables;
              if (variables) {
                params["variables"] = variables;
              }

              console.log("Params : " + JSON.stringify(params));

              apigateway.createDeployment(params, (err, data) => {
                if (err) {
                  console.log("Deployment failed.");
                  console.log(err);
                  response.send(event, context, response.FAILED, err);
                } else {
                  console.log("Deployment succeeded. StageId :", data.id);
                  response.send(event, context, response.SUCCESS, { state: "success" });
                }
              });
            } catch (e) {
              console.log("Deployment failed.");
              console.log(e);
              response.send(event, context, response.FAILED, e);
            }
          }
Outputs:
  ApimUpdateStage:
    Description: ARN of the lambda used to create or update stage
    Value: !GetAtt DeployStageLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}::ApimUpdateStage"
